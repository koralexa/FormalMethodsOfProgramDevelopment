theory Task_1_3
  use import int.Int
  use import ref.Ref

  (* Предусловие *)
  predicate phi (x: int) = (x > 1)

  (* W - множество натуральных чисел, объединенное с числом 0 *)
  predicate x_in_W (x: int) = (x >= 0)

  (* < - арифметическое сравнение *)
  predicate w_comparison (x: int) (y: int) = (x < y)

  (* Фундированность множества W *)
  goal W_is_fund: exists x_min:int. forall x:int.
    (x_in_W x) /\ (x_in_W x_min) -> ((w_comparison x_min x) \/ (x_min = x))

  (* Индуктивное утверждение *)
  predicate q (x: int) (y1: int) (y2: int) (y3: int) =
    y1 = y2 * x /\ ((y2 <= x /\ y3 = x) \/ (x <= y2 /\ y2 <= x * x /\ y3 = x * x))

  (* Оценочная функция *)
  function u (x: int) (y1: int) (y2: int) (y3: int): int = x * x * x + x * x - y1 - y3

  (* Условия верификации *)

  goal S_A_ver: forall x: int.
    (phi x)
    ->
    (x = 1 * x /\ ((1 <= x /\ x = x) \/ (x <= 1 /\ 1 <= x * x /\ x = x * x)))

  goal A_T_A_ver: forall x y1 y2 y3: int.
    ((phi x) /\ y2 < y3 /\ (q x y1 y2 y3))
    ->
    (q x (y1 + x) (y2 + 1) y3)

  goal A_FT_A_ver: forall x y1 y2 y3: int.
    ((phi x) /\ y2 >= y3 /\ y3 = x /\ (q x y1 y2 y3))
    ->
    (q x y1 y2 y1)

  (* Условие корректности выбора оценочной функции *)
  goal U_is_correct: forall x y1 y2 y3: int.
    (((phi x) /\ (q x y1 y2 y3)) -> (x_in_W (u x y1 y2 y3)))

  (* Условия завершаемости *)

  goal A_T_A: forall x y1 y2 y3: int.
    ((phi x) /\ y2 < y3 /\ (q x y1 y2 y3))
    ->
    (w_comparison (u x (y1 + x) (y2 + 1) y3) (u x y1 y2 y3))

  goal A_FT_A: forall x y1 y2 y3: int.
    ((phi x) /\ y2 >= y3 /\ y3 = x /\ (q x y1 y2 y3))
    ->
    (w_comparison (u x y1 y2 y1) (u x y1 y2 y3))

end