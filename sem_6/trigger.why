theory Sem_6
  use import int.Int

  lemma L: forall x: int. 
    x * 2 = x + x

  goal G: 
    not(exists x: int. (x > 0) /\ (forall t: int. (t > 0) -> (x * t = x)))

  goal G1: 
    not(exists x: int. (x > 0) /\ x * 2 = x + x /\ (forall t: int. (t > 0) -> (x * t = x)))

  (* 
  триггер для кванторной формулы 
  терм: все подвканторные перменные 
  <-> (унификация)
  терм

  триггер x * t
  <-> t->2
  x * 2

  Нужно придумать какое-угодно дополнительное утверждение, чтобы солвер увидел x * 2 и подставил это вместо x * t
  Например, x * 2 = 2 * x или x * 2 = x + x
  x * 2 = x * 2 не подойдет, солвер посчитает его слишком простым и выкинет

  Правила соотавления триггеров:
  1) Все подформулы/термы со всеми подкванторными переменными
  2) Минимальный терм (не содержит ^)
  3) Оставить только те из них, которые включают пользовательский символ (не встроенные)

  forall x y. (g x) -> (f (h x) y) /\ y = (p x)
  g, f, h - пользовательские символы
  Пусть мы выбрали (f (h x) y) в качестве триггера
  Где-то еще мы встретили (f (h 0) 1)         x -> 0, y -> 1
  (g 0) -> (f (h 0) 1)
  Триггер - это подсказка для солвера

  Пусть триггер (f x y).   (Это не соответствует правилам)
  Где-то еще мы встретили (f 0 1)         x -> 0, y -> 1
  (g 0) -> (f (h 0) 1)
  Этот терм снова унифицируется с триггером и дает:
  (f (h 0) 1)       x -> (h 0), y -> 1 
  (g (h 0)) -> (f (h (h 0)) 1)
  И т.д. до бесконечности

  Посмотреть как решал atl-ergo:
  alt-argo ____.ae
  --dtriggers - как проводился подбор триггеров
  --dmatching=2
  Обозначение x~5 это индекс
  Для cvc4 аналогично, но нужен cvc4 дебажной версии

  Можно добавить прямо в цель (G1), можно написать лемму, и тогда оно само добавится во все цели (G)

  forall x y z: int. x < y /\ y < z -> x < z
  Нет формулы, в которую входят все подвканторные переменные
  Тогда триггером называют множество термов, например {x < y, y < z} или {y < z, x < z}
  multitrigger
  *)
end